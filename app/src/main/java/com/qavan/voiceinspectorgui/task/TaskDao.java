package com.qavan.voiceinspectorgui.task;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASKS".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASKS";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Task_id = new Property(0, long.class, "task_id", true, "_id");
        public final static Property N_client_id = new Property(1, long.class, "n_client_id", false, "N_CLIENT_ID");
        public final static Property C_client_ls = new Property(2, String.class, "c_client_ls", false, "C_CLIENT_LS");
        public final static Property C_client_fio = new Property(3, String.class, "c_client_fio", false, "C_CLIENT_FIO");
        public final static Property C_client_address = new Property(4, String.class, "c_client_address", false, "C_CLIENT_ADDRESS");
        public final static Property C_client_note = new Property(5, String.class, "c_client_note", false, "C_CLIENT_NOTE");
        public final static Property C_client_status = new Property(6, int.class, "c_client_status", false, "C_CLIENT_STATUS");
        public final static Property C_gvs_id = new Property(7, String.class, "c_gvs_id", false, "C_GVS_ID");
        public final static Property C_hvs_id = new Property(8, String.class, "c_hvs_id", false, "C_HVS_ID");
        public final static Property C_ele_id = new Property(9, String.class, "c_ele_id", false, "C_ELE_ID");
        public final static Property C_gvs_night_prev_value = new Property(10, String.class, "c_gvs_night_prev_value", false, "C_GVS_NIGHT_PREV_VALUE");
        public final static Property C_gvs_night_current_value = new Property(11, String.class, "c_gvs_night_current_value", false, "C_GVS_NIGHT_CURRENT_VALUE");
        public final static Property C_gvs_night_prev_date = new Property(12, String.class, "c_gvs_night_prev_date", false, "C_GVS_NIGHT_PREV_DATE");
        public final static Property C_gvs_night_current_date = new Property(13, String.class, "c_gvs_night_current_date", false, "C_GVS_NIGHT_CURRENT_DATE");
        public final static Property C_gvs_peak_prev_value = new Property(14, String.class, "c_gvs_peak_prev_value", false, "C_GVS_PEAK_PREV_VALUE");
        public final static Property C_gvs_peak_current_value = new Property(15, String.class, "c_gvs_peak_current_value", false, "C_GVS_PEAK_CURRENT_VALUE");
        public final static Property C_gvs_peak_prev_date = new Property(16, String.class, "c_gvs_peak_prev_date", false, "C_GVS_PEAK_PREV_DATE");
        public final static Property C_gvs_peak_current_date = new Property(17, String.class, "c_gvs_peak_current_date", false, "C_GVS_PEAK_CURRENT_DATE");
        public final static Property C_gvs_half_peak_prev_value = new Property(18, String.class, "c_gvs_half_peak_prev_value", false, "C_GVS_HALF_PEAK_PREV_VALUE");
        public final static Property C_gvs_half_peak_current_value = new Property(19, String.class, "c_gvs_half_peak_current_value", false, "C_GVS_HALF_PEAK_CURRENT_VALUE");
        public final static Property C_gvs_half_peak_prev_date = new Property(20, String.class, "c_gvs_half_peak_prev_date", false, "C_GVS_HALF_PEAK_PREV_DATE");
        public final static Property C_gvs_half_peak_current_date = new Property(21, String.class, "c_gvs_half_peak_current_date", false, "C_GVS_HALF_PEAK_CURRENT_DATE");
        public final static Property C_hvs_night_prev_value = new Property(22, String.class, "c_hvs_night_prev_value", false, "C_HVS_NIGHT_PREV_VALUE");
        public final static Property C_hvs_night_current_value = new Property(23, String.class, "c_hvs_night_current_value", false, "C_HVS_NIGHT_CURRENT_VALUE");
        public final static Property C_hvs_night_prev_date = new Property(24, String.class, "c_hvs_night_prev_date", false, "C_HVS_NIGHT_PREV_DATE");
        public final static Property C_hvs_night_current_date = new Property(25, String.class, "c_hvs_night_current_date", false, "C_HVS_NIGHT_CURRENT_DATE");
        public final static Property C_hvs_peak_prev_value = new Property(26, String.class, "c_hvs_peak_prev_value", false, "C_HVS_PEAK_PREV_VALUE");
        public final static Property C_hvs_peak_current_value = new Property(27, String.class, "c_hvs_peak_current_value", false, "C_HVS_PEAK_CURRENT_VALUE");
        public final static Property C_hvs_peak_prev_date = new Property(28, String.class, "c_hvs_peak_prev_date", false, "C_HVS_PEAK_PREV_DATE");
        public final static Property C_hvs_peak_current_date = new Property(29, String.class, "c_hvs_peak_current_date", false, "C_HVS_PEAK_CURRENT_DATE");
        public final static Property C_hvs_half_peak_prev_value = new Property(30, String.class, "c_hvs_half_peak_prev_value", false, "C_HVS_HALF_PEAK_PREV_VALUE");
        public final static Property C_hvs_half_peak_current_value = new Property(31, String.class, "c_hvs_half_peak_current_value", false, "C_HVS_HALF_PEAK_CURRENT_VALUE");
        public final static Property C_hvs_half_peak_prev_date = new Property(32, String.class, "c_hvs_half_peak_prev_date", false, "C_HVS_HALF_PEAK_PREV_DATE");
        public final static Property C_hvs_half_peak_current_date = new Property(33, String.class, "c_hvs_half_peak_current_date", false, "C_HVS_HALF_PEAK_CURRENT_DATE");
        public final static Property C_ele_night_prev_value = new Property(34, String.class, "c_ele_night_prev_value", false, "C_ELE_NIGHT_PREV_VALUE");
        public final static Property C_ele_night_current_value = new Property(35, String.class, "c_ele_night_current_value", false, "C_ELE_NIGHT_CURRENT_VALUE");
        public final static Property C_ele_night_prev_date = new Property(36, String.class, "c_ele_night_prev_date", false, "C_ELE_NIGHT_PREV_DATE");
        public final static Property C_ele_night_current_date = new Property(37, String.class, "c_ele_night_current_date", false, "C_ELE_NIGHT_CURRENT_DATE");
        public final static Property C_ele_peak_prev_value = new Property(38, String.class, "c_ele_peak_prev_value", false, "C_ELE_PEAK_PREV_VALUE");
        public final static Property C_ele_peak_current_value = new Property(39, String.class, "c_ele_peak_current_value", false, "C_ELE_PEAK_CURRENT_VALUE");
        public final static Property C_ele_peak_prev_date = new Property(40, String.class, "c_ele_peak_prev_date", false, "C_ELE_PEAK_PREV_DATE");
        public final static Property C_ele_peak_current_date = new Property(41, String.class, "c_ele_peak_current_date", false, "C_ELE_PEAK_CURRENT_DATE");
        public final static Property C_ele_half_peak_prev_value = new Property(42, String.class, "c_ele_half_peak_prev_value", false, "C_ELE_HALF_PEAK_PREV_VALUE");
        public final static Property C_ele_half_peak_current_value = new Property(43, String.class, "c_ele_half_peak_current_value", false, "C_ELE_HALF_PEAK_CURRENT_VALUE");
        public final static Property C_ele_half_peak_prev_date = new Property(44, String.class, "c_ele_half_peak_prev_date", false, "C_ELE_HALF_PEAK_PREV_DATE");
        public final static Property C_ele_half_peak_current_date = new Property(45, String.class, "c_ele_half_peak_current_date", false, "C_ELE_HALF_PEAK_CURRENT_DATE");
    }

    private DaoSession daoSession;


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASKS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: task_id
                "\"N_CLIENT_ID\" INTEGER NOT NULL ," + // 1: n_client_id
                "\"C_CLIENT_LS\" TEXT NOT NULL ," + // 2: c_client_ls
                "\"C_CLIENT_FIO\" TEXT NOT NULL ," + // 3: c_client_fio
                "\"C_CLIENT_ADDRESS\" TEXT NOT NULL ," + // 4: c_client_address
                "\"C_CLIENT_NOTE\" TEXT NOT NULL ," + // 5: c_client_note
                "\"C_CLIENT_STATUS\" INTEGER NOT NULL ," + // 6: c_client_status
                "\"C_GVS_ID\" TEXT NOT NULL ," + // 7: c_gvs_id
                "\"C_HVS_ID\" TEXT NOT NULL ," + // 8: c_hvs_id
                "\"C_ELE_ID\" TEXT NOT NULL ," + // 9: c_ele_id
                "\"C_GVS_NIGHT_PREV_VALUE\" TEXT NOT NULL ," + // 10: c_gvs_night_prev_value
                "\"C_GVS_NIGHT_CURRENT_VALUE\" TEXT NOT NULL ," + // 11: c_gvs_night_current_value
                "\"C_GVS_NIGHT_PREV_DATE\" TEXT NOT NULL ," + // 12: c_gvs_night_prev_date
                "\"C_GVS_NIGHT_CURRENT_DATE\" TEXT NOT NULL ," + // 13: c_gvs_night_current_date
                "\"C_GVS_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 14: c_gvs_peak_prev_value
                "\"C_GVS_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 15: c_gvs_peak_current_value
                "\"C_GVS_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 16: c_gvs_peak_prev_date
                "\"C_GVS_PEAK_CURRENT_DATE\" TEXT NOT NULL ," + // 17: c_gvs_peak_current_date
                "\"C_GVS_HALF_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 18: c_gvs_half_peak_prev_value
                "\"C_GVS_HALF_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 19: c_gvs_half_peak_current_value
                "\"C_GVS_HALF_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 20: c_gvs_half_peak_prev_date
                "\"C_GVS_HALF_PEAK_CURRENT_DATE\" TEXT NOT NULL ," + // 21: c_gvs_half_peak_current_date
                "\"C_HVS_NIGHT_PREV_VALUE\" TEXT NOT NULL ," + // 22: c_hvs_night_prev_value
                "\"C_HVS_NIGHT_CURRENT_VALUE\" TEXT NOT NULL ," + // 23: c_hvs_night_current_value
                "\"C_HVS_NIGHT_PREV_DATE\" TEXT NOT NULL ," + // 24: c_hvs_night_prev_date
                "\"C_HVS_NIGHT_CURRENT_DATE\" TEXT NOT NULL ," + // 25: c_hvs_night_current_date
                "\"C_HVS_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 26: c_hvs_peak_prev_value
                "\"C_HVS_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 27: c_hvs_peak_current_value
                "\"C_HVS_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 28: c_hvs_peak_prev_date
                "\"C_HVS_PEAK_CURRENT_DATE\" TEXT NOT NULL ," + // 29: c_hvs_peak_current_date
                "\"C_HVS_HALF_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 30: c_hvs_half_peak_prev_value
                "\"C_HVS_HALF_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 31: c_hvs_half_peak_current_value
                "\"C_HVS_HALF_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 32: c_hvs_half_peak_prev_date
                "\"C_HVS_HALF_PEAK_CURRENT_DATE\" TEXT NOT NULL ," + // 33: c_hvs_half_peak_current_date
                "\"C_ELE_NIGHT_PREV_VALUE\" TEXT NOT NULL ," + // 34: c_ele_night_prev_value
                "\"C_ELE_NIGHT_CURRENT_VALUE\" TEXT NOT NULL ," + // 35: c_ele_night_current_value
                "\"C_ELE_NIGHT_PREV_DATE\" TEXT NOT NULL ," + // 36: c_ele_night_prev_date
                "\"C_ELE_NIGHT_CURRENT_DATE\" TEXT NOT NULL ," + // 37: c_ele_night_current_date
                "\"C_ELE_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 38: c_ele_peak_prev_value
                "\"C_ELE_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 39: c_ele_peak_current_value
                "\"C_ELE_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 40: c_ele_peak_prev_date
                "\"C_ELE_PEAK_CURRENT_DATE\" TEXT NOT NULL ," + // 41: c_ele_peak_current_date
                "\"C_ELE_HALF_PEAK_PREV_VALUE\" TEXT NOT NULL ," + // 42: c_ele_half_peak_prev_value
                "\"C_ELE_HALF_PEAK_CURRENT_VALUE\" TEXT NOT NULL ," + // 43: c_ele_half_peak_current_value
                "\"C_ELE_HALF_PEAK_PREV_DATE\" TEXT NOT NULL ," + // 44: c_ele_half_peak_prev_date
                "\"C_ELE_HALF_PEAK_CURRENT_DATE\" TEXT NOT NULL );"); // 45: c_ele_half_peak_current_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTask_id());
        stmt.bindLong(2, entity.getN_client_id());
        stmt.bindString(3, entity.getC_client_ls());
        stmt.bindString(4, entity.getC_client_fio());
        stmt.bindString(5, entity.getC_client_address());
        stmt.bindString(6, entity.getC_client_note());
        stmt.bindLong(7, entity.getC_client_status());
        stmt.bindString(8, entity.getC_gvs_id());
        stmt.bindString(9, entity.getC_hvs_id());
        stmt.bindString(10, entity.getC_ele_id());
        stmt.bindString(11, entity.getC_gvs_night_prev_value());
        stmt.bindString(12, entity.getC_gvs_night_current_value());
        stmt.bindString(13, entity.getC_gvs_night_prev_date());
        stmt.bindString(14, entity.getC_gvs_night_current_date());
        stmt.bindString(15, entity.getC_gvs_peak_prev_value());
        stmt.bindString(16, entity.getC_gvs_peak_current_value());
        stmt.bindString(17, entity.getC_gvs_peak_prev_date());
        stmt.bindString(18, entity.getC_gvs_peak_current_date());
        stmt.bindString(19, entity.getC_gvs_half_peak_prev_value());
        stmt.bindString(20, entity.getC_gvs_half_peak_current_value());
        stmt.bindString(21, entity.getC_gvs_half_peak_prev_date());
        stmt.bindString(22, entity.getC_gvs_half_peak_current_date());
        stmt.bindString(23, entity.getC_hvs_night_prev_value());
        stmt.bindString(24, entity.getC_hvs_night_current_value());
        stmt.bindString(25, entity.getC_hvs_night_prev_date());
        stmt.bindString(26, entity.getC_hvs_night_current_date());
        stmt.bindString(27, entity.getC_hvs_peak_prev_value());
        stmt.bindString(28, entity.getC_hvs_peak_current_value());
        stmt.bindString(29, entity.getC_hvs_peak_prev_date());
        stmt.bindString(30, entity.getC_hvs_peak_current_date());
        stmt.bindString(31, entity.getC_hvs_half_peak_prev_value());
        stmt.bindString(32, entity.getC_hvs_half_peak_current_value());
        stmt.bindString(33, entity.getC_hvs_half_peak_prev_date());
        stmt.bindString(34, entity.getC_hvs_half_peak_current_date());
        stmt.bindString(35, entity.getC_ele_night_prev_value());
        stmt.bindString(36, entity.getC_ele_night_current_value());
        stmt.bindString(37, entity.getC_ele_night_prev_date());
        stmt.bindString(38, entity.getC_ele_night_current_date());
        stmt.bindString(39, entity.getC_ele_peak_prev_value());
        stmt.bindString(40, entity.getC_ele_peak_current_value());
        stmt.bindString(41, entity.getC_ele_peak_prev_date());
        stmt.bindString(42, entity.getC_ele_peak_current_date());
        stmt.bindString(43, entity.getC_ele_half_peak_prev_value());
        stmt.bindString(44, entity.getC_ele_half_peak_current_value());
        stmt.bindString(45, entity.getC_ele_half_peak_prev_date());
        stmt.bindString(46, entity.getC_ele_half_peak_current_date());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTask_id());
        stmt.bindLong(2, entity.getN_client_id());
        stmt.bindString(3, entity.getC_client_ls());
        stmt.bindString(4, entity.getC_client_fio());
        stmt.bindString(5, entity.getC_client_address());
        stmt.bindString(6, entity.getC_client_note());
        stmt.bindLong(7, entity.getC_client_status());
        stmt.bindString(8, entity.getC_gvs_id());
        stmt.bindString(9, entity.getC_hvs_id());
        stmt.bindString(10, entity.getC_ele_id());
        stmt.bindString(11, entity.getC_gvs_night_prev_value());
        stmt.bindString(12, entity.getC_gvs_night_current_value());
        stmt.bindString(13, entity.getC_gvs_night_prev_date());
        stmt.bindString(14, entity.getC_gvs_night_current_date());
        stmt.bindString(15, entity.getC_gvs_peak_prev_value());
        stmt.bindString(16, entity.getC_gvs_peak_current_value());
        stmt.bindString(17, entity.getC_gvs_peak_prev_date());
        stmt.bindString(18, entity.getC_gvs_peak_current_date());
        stmt.bindString(19, entity.getC_gvs_half_peak_prev_value());
        stmt.bindString(20, entity.getC_gvs_half_peak_current_value());
        stmt.bindString(21, entity.getC_gvs_half_peak_prev_date());
        stmt.bindString(22, entity.getC_gvs_half_peak_current_date());
        stmt.bindString(23, entity.getC_hvs_night_prev_value());
        stmt.bindString(24, entity.getC_hvs_night_current_value());
        stmt.bindString(25, entity.getC_hvs_night_prev_date());
        stmt.bindString(26, entity.getC_hvs_night_current_date());
        stmt.bindString(27, entity.getC_hvs_peak_prev_value());
        stmt.bindString(28, entity.getC_hvs_peak_current_value());
        stmt.bindString(29, entity.getC_hvs_peak_prev_date());
        stmt.bindString(30, entity.getC_hvs_peak_current_date());
        stmt.bindString(31, entity.getC_hvs_half_peak_prev_value());
        stmt.bindString(32, entity.getC_hvs_half_peak_current_value());
        stmt.bindString(33, entity.getC_hvs_half_peak_prev_date());
        stmt.bindString(34, entity.getC_hvs_half_peak_current_date());
        stmt.bindString(35, entity.getC_ele_night_prev_value());
        stmt.bindString(36, entity.getC_ele_night_current_value());
        stmt.bindString(37, entity.getC_ele_night_prev_date());
        stmt.bindString(38, entity.getC_ele_night_current_date());
        stmt.bindString(39, entity.getC_ele_peak_prev_value());
        stmt.bindString(40, entity.getC_ele_peak_current_value());
        stmt.bindString(41, entity.getC_ele_peak_prev_date());
        stmt.bindString(42, entity.getC_ele_peak_current_date());
        stmt.bindString(43, entity.getC_ele_half_peak_prev_value());
        stmt.bindString(44, entity.getC_ele_half_peak_current_value());
        stmt.bindString(45, entity.getC_ele_half_peak_prev_date());
        stmt.bindString(46, entity.getC_ele_half_peak_current_date());
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.getLong(offset + 0), // task_id
            cursor.getLong(offset + 1), // n_client_id
            cursor.getString(offset + 2), // c_client_ls
            cursor.getString(offset + 3), // c_client_fio
            cursor.getString(offset + 4), // c_client_address
            cursor.getString(offset + 5), // c_client_note
            cursor.getInt(offset + 6), // c_client_status
            cursor.getString(offset + 7), // c_gvs_id
            cursor.getString(offset + 8), // c_hvs_id
            cursor.getString(offset + 9), // c_ele_id
            cursor.getString(offset + 10), // c_gvs_night_prev_value
            cursor.getString(offset + 11), // c_gvs_night_current_value
            cursor.getString(offset + 12), // c_gvs_night_prev_date
            cursor.getString(offset + 13), // c_gvs_night_current_date
            cursor.getString(offset + 14), // c_gvs_peak_prev_value
            cursor.getString(offset + 15), // c_gvs_peak_current_value
            cursor.getString(offset + 16), // c_gvs_peak_prev_date
            cursor.getString(offset + 17), // c_gvs_peak_current_date
            cursor.getString(offset + 18), // c_gvs_half_peak_prev_value
            cursor.getString(offset + 19), // c_gvs_half_peak_current_value
            cursor.getString(offset + 20), // c_gvs_half_peak_prev_date
            cursor.getString(offset + 21), // c_gvs_half_peak_current_date
            cursor.getString(offset + 22), // c_hvs_night_prev_value
            cursor.getString(offset + 23), // c_hvs_night_current_value
            cursor.getString(offset + 24), // c_hvs_night_prev_date
            cursor.getString(offset + 25), // c_hvs_night_current_date
            cursor.getString(offset + 26), // c_hvs_peak_prev_value
            cursor.getString(offset + 27), // c_hvs_peak_current_value
            cursor.getString(offset + 28), // c_hvs_peak_prev_date
            cursor.getString(offset + 29), // c_hvs_peak_current_date
            cursor.getString(offset + 30), // c_hvs_half_peak_prev_value
            cursor.getString(offset + 31), // c_hvs_half_peak_current_value
            cursor.getString(offset + 32), // c_hvs_half_peak_prev_date
            cursor.getString(offset + 33), // c_hvs_half_peak_current_date
            cursor.getString(offset + 34), // c_ele_night_prev_value
            cursor.getString(offset + 35), // c_ele_night_current_value
            cursor.getString(offset + 36), // c_ele_night_prev_date
            cursor.getString(offset + 37), // c_ele_night_current_date
            cursor.getString(offset + 38), // c_ele_peak_prev_value
            cursor.getString(offset + 39), // c_ele_peak_current_value
            cursor.getString(offset + 40), // c_ele_peak_prev_date
            cursor.getString(offset + 41), // c_ele_peak_current_date
            cursor.getString(offset + 42), // c_ele_half_peak_prev_value
            cursor.getString(offset + 43), // c_ele_half_peak_current_value
            cursor.getString(offset + 44), // c_ele_half_peak_prev_date
            cursor.getString(offset + 45) // c_ele_half_peak_current_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setTask_id(cursor.getLong(offset + 0));
        entity.setN_client_id(cursor.getLong(offset + 1));
        entity.setC_client_ls(cursor.getString(offset + 2));
        entity.setC_client_fio(cursor.getString(offset + 3));
        entity.setC_client_address(cursor.getString(offset + 4));
        entity.setC_client_note(cursor.getString(offset + 5));
        entity.setC_client_status(cursor.getInt(offset + 6));
        entity.setC_gvs_id(cursor.getString(offset + 7));
        entity.setC_hvs_id(cursor.getString(offset + 8));
        entity.setC_ele_id(cursor.getString(offset + 9));
        entity.setC_gvs_night_prev_value(cursor.getString(offset + 10));
        entity.setC_gvs_night_current_value(cursor.getString(offset + 11));
        entity.setC_gvs_night_prev_date(cursor.getString(offset + 12));
        entity.setC_gvs_night_current_date(cursor.getString(offset + 13));
        entity.setC_gvs_peak_prev_value(cursor.getString(offset + 14));
        entity.setC_gvs_peak_current_value(cursor.getString(offset + 15));
        entity.setC_gvs_peak_prev_date(cursor.getString(offset + 16));
        entity.setC_gvs_peak_current_date(cursor.getString(offset + 17));
        entity.setC_gvs_half_peak_prev_value(cursor.getString(offset + 18));
        entity.setC_gvs_half_peak_current_value(cursor.getString(offset + 19));
        entity.setC_gvs_half_peak_prev_date(cursor.getString(offset + 20));
        entity.setC_gvs_half_peak_current_date(cursor.getString(offset + 21));
        entity.setC_hvs_night_prev_value(cursor.getString(offset + 22));
        entity.setC_hvs_night_current_value(cursor.getString(offset + 23));
        entity.setC_hvs_night_prev_date(cursor.getString(offset + 24));
        entity.setC_hvs_night_current_date(cursor.getString(offset + 25));
        entity.setC_hvs_peak_prev_value(cursor.getString(offset + 26));
        entity.setC_hvs_peak_current_value(cursor.getString(offset + 27));
        entity.setC_hvs_peak_prev_date(cursor.getString(offset + 28));
        entity.setC_hvs_peak_current_date(cursor.getString(offset + 29));
        entity.setC_hvs_half_peak_prev_value(cursor.getString(offset + 30));
        entity.setC_hvs_half_peak_current_value(cursor.getString(offset + 31));
        entity.setC_hvs_half_peak_prev_date(cursor.getString(offset + 32));
        entity.setC_hvs_half_peak_current_date(cursor.getString(offset + 33));
        entity.setC_ele_night_prev_value(cursor.getString(offset + 34));
        entity.setC_ele_night_current_value(cursor.getString(offset + 35));
        entity.setC_ele_night_prev_date(cursor.getString(offset + 36));
        entity.setC_ele_night_current_date(cursor.getString(offset + 37));
        entity.setC_ele_peak_prev_value(cursor.getString(offset + 38));
        entity.setC_ele_peak_current_value(cursor.getString(offset + 39));
        entity.setC_ele_peak_prev_date(cursor.getString(offset + 40));
        entity.setC_ele_peak_current_date(cursor.getString(offset + 41));
        entity.setC_ele_half_peak_prev_value(cursor.getString(offset + 42));
        entity.setC_ele_half_peak_current_value(cursor.getString(offset + 43));
        entity.setC_ele_half_peak_prev_date(cursor.getString(offset + 44));
        entity.setC_ele_half_peak_current_date(cursor.getString(offset + 45));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setTask_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getTask_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
